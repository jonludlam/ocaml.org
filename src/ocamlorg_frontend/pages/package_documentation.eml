let sidebar
~str_path
~toc
~maptoc
=
  <div class="flex flex-col font-normal text-content dark:text-dark-content" id="htmx-sidebar">
    <% if (toc != []) then ( %>
    <div class="xl:hidden mb-6 xl:mb-0">
    <%s! Toc.render toc %>
    </div><% ); %>
    <div class="space-y-6 flex flex-col overflow-x:scroll">
      <div>
      <%s! Navmap.render ~path:str_path maptoc %>
      </div>
    </div>
  </div>

let right_sidebar
~toc
=
  <div class="pt-6" id="htmx-right-sidebar">
    <%s! Toc.render toc %>
  </div>

let render
~(path: Package_breadcrumbs.path)
~page
~toc
~maptoc
~content
(package : Package.package)
=
let str_path =
  match path with
    | Overview _ -> []
    | Documentation (docs_path) ->
        List.map (function
          | Package_breadcrumbs.Module { name ; _ } -> name
          | ModuleType { name ; _ } -> name
          | Parameter  ({ name ; _ }, _) -> name
          | Class { name ; _ } -> name
          | ClassType { name ; _ } -> name
          | Page { name; _ } -> name
        ) docs_path |> List.tl
in
Package_layout.render
~title:(Printf.sprintf "%s %s Â· OCaml Package" package.name (Package.render_version package))
~description:(Printf.sprintf "%s %s: %s" package.name (Package.render_version package) package.synopsis)
~package
~path
?page
~documentation_status:Success
~canonical:(Url.Package.documentation package.name ~version:(Package.specific_version package) ~page:(Url.Package.documentation ?version:(Some (Package.specific_version package)) package.name))
~styles:["css/main.css"; "css/doc.css"]
~left_sidebar_html:(sidebar ~str_path ~toc ~maptoc)
~right_sidebar_html:(right_sidebar ~toc) @@
<div id="htmx-content">
  <%s! Package_breadcrumbs.render ~path package %>
  <div class="odoc prose dark:prose-invert prose-orange">
    <%s! content %>
  </div>
</div>
<script>
window.onload = (event) => {
  document.body.addEventListener('htmx:afterSwap', (evt) => {
    if (evt.detail.error || evt.detail.failed) {
      window.location = evt.detail.requestConfig.path;
      return;
    }
    window.pageYOffset = 0;
    evt.detail.elt.dispatchEvent(new CustomEvent('close-sidebar', { bubbles: true }));
  });
  document.body.addEventListener('htmx:swapError', (evt) => {
    window.location = evt.detail.requestConfig.path;
  });
  document.body.addEventListener('htmx:responseError', (evt) => {
    window.location = evt.detail.requestConfig.path;
  });
  document.body.addEventListener('htmx:historyCacheMissError', (evt) => {
    window.location = evt.detail.path;
  });
  document.body.addEventListener('htmx:onLoadError', (evt) => {
    window.location = evt.detail.requestConfig.path;
  });
};
</script>